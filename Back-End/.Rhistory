cat('hello')
cat('Hello')
install.packages("rmarkdown", dep = TRUE)
install.packages("tinytex")
tinytex::install_tinytex()
install. Packages("BiocManager") # if you haven't installed it yet :)
BiocManager::install("minfi")
install.Packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("minfi")
BiocManager::install("IlluminaHumanMethylation450kmanifest")
BiocManager::install("IlluminaHumanMethylation450kanno.ilmn12.hg19")
BiocManager::install("IlluminaHumanMethylationEPICmanifest")
BiocManager::install("IlluminaHumanMethylationEPICanno.ilm10b4.hg19")
BiocManager::install("FlowSorted.Blood.450k") # ~160MB
BiocManager::install("FlowSorted.Blood.EPIC") # ~95KB (+ large data load later)
FlowSorted.Blood.EPIC <- libraryDataGet('FlowSorted.Blood.EPIC') # ~160MB data load to local cache
FlowSorted.Blood.EPIC <- libraryDataGet('FlowSorted.Blood.EPIC') # ~160MB data load to local cache
BiocManager::install("IlluminaHumanMethylation450kmanifest")
BiocManager::install("IlluminaHumanMethylation450kanno.ilmn12.hg19") # ~55MB
BiocManager::install("IlluminaHumanMethylationEPICmanifest")
BiocManager::install("IlluminaHumanMethylationEPICanno.ilm10b4.hg19") # ~150MB
BiocManager::install("FlowSorted.Blood.450k") # ~160MB
BiocManager::install("FlowSorted.Blood.EPIC") # ~95KB (+ large data load later)
FlowSorted.Blood.EPIC <- libraryDataGet('FlowSorted.Blood.EPIC') # ~160MB data load to local cache
BiocManager::install("FlowSorted.Blood.EPIC")
FlowSorted.Blood.EPIC <- libraryDataGet('FlowSorted.Blood.EPIC') # ~160MB data load to local cache
BiocManager::install("ggfortify") # for PCA plots
BiocManager::install("sva") # for ComBat
BiocManager::install("QCEWAS")
BiocManager::install("missMethyl")
setwd("~/Desktop/Proteo_meta_and_epi/day5")
install.packages("devtools")
devtools::install_github("jbisanz/qiime2R")
install.packages("BiocManager")
BiocManager::install("phyloseq")
install.packages("BiocManager")
data_folder="/Users/lea/Desktop/Proteo_meta_and_epi/day5"
table_qza=file.path(data_folder,"s06b_rarefied_table.qza")
rooted_tree_qza=file.path(data_folder,"s05_rooted_tree.qza")
taxonomy_qza=file.path(data_folder,"s10_taxonomy.qza")
metadata_tsv=file.path(data_folder,"samples.txt")
# Convert QIIME2 artifacts & metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
library(devtools)
library(phyloseq)
library(vegan)
library(dendextend)
install.packages("dendextend")
library(dendextend)
# Convert QIIME2 artifacts & metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
devtools::install_github("jbisanz/qiime2R")
devtools::install_github("jbisanz/qiime2R", force=TRUE)
# Convert QIIME2 artifacts & metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
install.packages("devtools")
devtools::install_github("jbisanz/qiime2R", force=TRUE)
install.packages("BiocManager")
BiocManager::install("phyloseq")
BiocManager::install("vegan")
install.packages("dendextend")
library(devtools)
library(phyloseq)
library(vegan)
library(dendextend)
# Convert QIIME2 artifacts & metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
?qza_to_phyloseq
??qza_to_phyloseq
library(qiime2R)
# Convert QIIME2 artifacts & metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
# Extract metadata and distance matrix from phyloseq object
metadata <- data.frame(sample_data(phy))
distance_matrix <- distance(phy, method="bray")
bray_clust <- hclust(distance_matrix, method="ward.D2")
bray_dend <- as.dendrogram(bray_clust, hang=0.1)
colour_labels <- c('red','green','blue')[ match(as.factor(metadata$group),
c('frue_ch','mtca_au','ukul_za') ) ]
labels_colors(bray_dend) <- colour_labels
plot(bray_dend, main="Samples dendrogram", ylab="Distances")
legend("topright",
legend=c('frue_ch','mtca_au','ukul_za'),
col=c('red','green','blue'),
bty="n",lty=1, cex=0.8)
# Run PERMANOVA
adonis2(distance_matrix ~ group, data = metadata, permutations=100000)
sessionInfo()
library (FoodQualityController)
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
assess.quality("config_test.json")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
library(devtools)
library(devtools)
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
assess.quality("config_test.json")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
library(FoodQualityController)
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
setwd("~/sorfML/FQCforSorfml")
install()
setwd("~/sorfML/sorfml2.0.1/Back-End")
assess.quality("config_test.json")
assess.quality("config_test.json")
